service: pg-tenant-api

plugins:
  - serverless-offline

custom:
  serverless-offline:
    host: 0.0.0.0
  secrets: ${file(./.env.${opt:stage,'local'}.json)}

package:
  individually: true
  exclude:
    - '.*/**'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
    apiKeys: 
      - ${self:custom.secrets.API_KEY}
  stage: ${opt:stage,'local'}
  region: ${self:custom.secrets.REGION}
  role: ${self:custom.secrets.LAMBDA_ROLE_ARN}
  logs:
    restApi: true
  environment:
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    DYNAMODB_TABLE: ${self:custom.secrets.DYNAMODB_TABLE}
    REGION: ${self:custom.secrets.REGION}
    AWS_ACCESS_KEY_ID: ${self:custom.secrets.AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${self:custom.secrets.AWS_SECRET_ACCESS_KEY}
    DYNAMO_ENDPOINT: ${self:custom.secrets.DYNAMO_ENDPOINT}
    SENTRY_ENABLED: ${self:custom.secrets.SENTRY_ENABLED}
    SENTRY_DSN: ${self:custom.secrets.SENTRY_DSN}

functions:
  get-by-id:
    handler: tenants/get-by-id.handler
    events:
      - http:
          path: /{id}
          method: get
          cors: true
  get-by-host:
    handler: tenants/get-by-host.handler
    events:
      - http:
          path: /host/{name}
          method: get
          cors: true
  get-strategies-by-host:
    handler: tenants/get-strategies-by-host.handler
    events:
      - http:
          path: /host/{name}/strategies
          method: get
          cors: true
  create:
    handler: tenants/create.handler
    events:
      - http:
          path: /
          method: post
          cors: true
          private: true
  update:
    handler: tenants/update.handler
    events:
      - http:
          path: /{id}
          method: put
          cors: true
          private: true