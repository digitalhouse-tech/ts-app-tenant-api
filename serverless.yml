service: pg-tenant-api

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  timeout: 10
  stage: ${opt:stage,'local'}
  environment: ${file(./environment/${opt:stage,'local'}/env.yml)}
  region: ${file(./environment/${opt:stage,'local'}/provider.yml):region}
  vpc: ${file(./environment/${opt:stage,'local'}/provider.yml):vpc}
  iam: ${file(./environment/${opt:stage,'local'}/provider.yml):iam}
  logs: ${file(./environment/${opt:stage,'local'}/provider.yml):logs}
  tracing: ${file(./environment/${opt:stage,'local'}/provider.yml):tracing}
  deploymentBucket:
      blockPublicAccess: true
      serverSideEncryption: aws:kms
      sseKMSKeyId: ${env:AWS_BUCKET_KMS_KEY}
  kmsKeyArn: ${env:AWS_LAMBDA_KMS_KEY}
  apiGateway: ${file(./environment/${opt:stage,'local'}/provider.yml):apiGateway}

plugins:
  - serverless-offline
  - serverless-prune-plugin

custom:
  serverless-offline:
    host: 0.0.0.0
  cors: ${file(./environment/cors.yml)}
  prune:
    automatic: true
    number: 3

package:
  individually: true
  exclude:
    - '.*/**'

functions:
  get-by-id:
    description: Get by ID
    handler: src/tenants/get-by-id.handler
    events:
      - http:
          path: /{id}
          method: get
          cors: ${self:custom.cors}
    tags:
      env: ${env:ENVIRONMENT}
      service: pg-tenant-api           
  get-by-host:
    description: Get By Host
    handler: src/tenants/get-by-host.handler
    events:
      - http:
          path: /host/{name}
          method: get
          cors: ${self:custom.cors}
    tags:
      env: ${env:ENVIRONMENT}
      service: pg-tenant-api         
  get-strategies-by-host:
    description: Get strategies by host
    handler: src/tenants/get-strategies-by-host.handler
    events:
      - http:
          path: /host/{name}/strategies
          method: get
          cors: ${self:custom.cors}
    tags:
      env: ${env:ENVIRONMENT}
      service: pg-tenant-api         
